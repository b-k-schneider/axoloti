<objdefs>
   <obj.normal id="fdn4" sha="13d669964bda5b57297a930109b40a6bc2f548e4">
      <sDescription>Feedback delay network with 4 delay lines. High quality 32bit.</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <inlets>
         <frac32buffer name="in1" description="in1"/>
         <frac32buffer name="in2" description="in2"/>
         <frac32buffer name="in3" description="in3"/>
         <frac32buffer name="in4" description="in4"/>
      </inlets>
      <outlets>
         <frac32buffer name="out1" description="out1"/>
         <frac32buffer name="out2" description="out2"/>
         <frac32buffer name="out3" description="out3"/>
         <frac32buffer name="out4" description="out4"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="g" noLabel="true">
            <MinValue v="0.0"/>
            <MaxValue v="63.5"/>
         </frac32.u.map>
      </params>
      <attribs>
         <spinner name="d1" MinValue="2" MaxValue="4096" DefaultValue="128"/>
         <spinner name="d2" MinValue="2" MaxValue="4096" DefaultValue="128"/>
         <spinner name="d3" MinValue="2" MaxValue="4096" DefaultValue="128"/>
         <spinner name="d4" MinValue="2" MaxValue="4096" DefaultValue="128"/>
      </attribs>
      <code.declaration><![CDATA[int32_t d1d[%d1%];
int32_t d2d[%d2%];
int32_t d3d[%d3%];
int32_t d4d[%d4%];
uint32_t d1p;
uint32_t d2p;
uint32_t d3p;
uint32_t d4p;
]]></code.declaration>
      <code.init><![CDATA[int i;for(i=0;i<%d1%;i++) d1d[i]=0;
for(i=0;i<%d2%;i++) d2d[i]=0;
for(i=0;i<%d3%;i++) d3d[i]=0;
for(i=0;i<%d4%;i++) d4d[i]=0;
d1p = 0;
d2p = 0;
d3p = 0;
d4p = 0;
]]></code.init>
      <code.krate><![CDATA[int32_t g2 = 755299123+%g%;
]]></code.krate>
      <code.srate><![CDATA[int32_t i1 = %in1% + d1d[d1p];
int32_t i2 = %in2% + d2d[d2p];
int32_t i3 = %in3% + d3d[d3p];
int32_t i4 = %in4% + d4d[d4p];
int32_t t1 = i2 + i3;
int32_t t2 = -i1 - i4;
int32_t t3 = i1 - i4;
int32_t t4 = i2 - i3;
int32_t o1 = ___SMMLA(t1,g2,t1>>1);
int32_t o2 = ___SMMLA(t2,g2,t2>>1);
int32_t o3 = ___SMMLA(t3,g2,t3>>1);
int32_t o4 = ___SMMLA(t4,g2,t4>>1);
d1d[d1p] = o1;
d2d[d2p] = o2;
d3d[d3p] = o3;
d4d[d4p] = o4;
d1p++;
d2p++;
d3p++;
d4p++;
if (d1p == %d1%) d1p = 0;
if (d2p == %d2%) d2p = 0;
if (d3p == %d3%) d3p = 0;
if (d4p == %d4%) d4p = 0;
%out1% = o1;
%out2% = o2;
%out3% = o3;
%out4% = o4;
]]></code.srate>
   </obj.normal>
</objdefs>